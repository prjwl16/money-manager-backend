// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  firstName            String?
  lastName             String?
  phone                String?               @unique
  email                String?               @unique
  password             String?
  role                 UserRole              @default(USER)
  createdAt            DateTime              @default(now()) @db.Timestamp()
  updatedAt            DateTime              @updatedAt @db.Timestamp()
  googleId             String?               @unique
  secret               String?               @unique
  avatar               String?
  splitwiseUserId      Int?                  @unique
  splitwiseAccessToken String?
  // Relations
  accounts             Account[] // One to many
  userInGroups         userInGroups[] // Many to many
  usersInTransactions  usersInTransactions[] // Many to many
  transactionPaid      Transaction[]         @relation("PaidBy")
  transactionCreated   Transaction[]         @relation("CreatedBy")
  groups               groups[]              @relation("createdBy")
  Category             Category[]
}

model Transaction {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  type                  TransactionAction     @default(EXPENSE)
  amount                Float
  currency              currency              @default(INR)
  particular            String? // title | name
  description           String?
  date                  DateTime?
  place                 String?
  createdAt             DateTime              @default(now()) @db.Timestamp()
  updatedAt             DateTime              @updatedAt @db.Timestamp()
  // Subscription
  logo                  String?
  isSubscription        Boolean               @default(false)
  active                Boolean               @default(true)
  plan                  subscriptionPeriod    @default(ONETIME)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  // Splitwise
  swExpenseId           Int?                  @unique
  swGroupId             Int?                  @unique
  // Relations
  accountId             String                @db.Uuid() // Many to one
  account               Account               @relation(fields: [accountId], references: [id])
  categoryId            String                @db.Uuid() // Many to one
  category              Category              @relation(fields: [categoryId], references: [id])
  groupId               String?               @db.Uuid() // Many to one
  groups                groups?               @relation(fields: [groupId], references: [id])
  usersInTransactions   usersInTransactions[] // Many to many
  paidById              String?               @db.Uuid()
  createdById           String?               @db.Uuid()
  updatedByIds          String[]              @db.Uuid()

  paidBy    User? @relation("PaidBy", fields: [paidById], references: [id])
  createdBy User? @relation("CreatedBy", fields: [createdById], references: [id])
}

model Account {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name        String        @unique
  type        AccountType   @default(CASH)
  balance     Float
  createdAt   DateTime      @default(now()) @db.Timestamp()
  updatedAt   DateTime      @updatedAt @db.Timestamp()
  // Relations
  userId      String        @db.Uuid() // Many to one
  user        User          @relation(fields: [userId], references: [id])
  transaction Transaction[] // Many to many
}

// TODO Add user id
model Category {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  swId         Int?          @unique
  title        String
  description  String?
  createdAt    DateTime      @default(now()) @db.Timestamp()
  updatedAt    DateTime      @updatedAt @db.Timestamp()
  // Relations
  userId       String?       @db.Uuid() // Many to one
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[] // Many to many
}

// TODO: Add subcategoryes

model groups {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name          String?
  description   String?
  logo          String?
  createdAt     DateTime       @default(now()) @db.Timestamp()
  updatedAt     DateTime       @updatedAt @db.Timestamp()
  // Relations
  transactions  Transaction[] // Many to many
  userInGroups  userInGroups[] // Many to many
  // User who created the group
  createdBy     String?        @db.Uuid()
  createdByUser User?          @relation("createdBy", fields: [createdBy], references: [id])
}

// Many to many tables
model userInGroups {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid()
  groups    groups   @relation(fields: [groupId], references: [id])
  groupId   String   @db.Uuid()
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()

  @@id([userId, groupId])
}

model usersInTransactions {
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid()
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @db.Uuid()
  createdAt     DateTime    @default(now()) @db.Timestamp()
  updatedAt     DateTime    @updatedAt @db.Timestamp()
  // Splitwise
  splitShare    Float       @default(0)

  @@id([userId, transactionId])
}

// User enums
enum UserRole {
  USER
  ADMIN
}

// Transaction enums
enum TransactionAction {
  INCOME
  EXPENSE
  SUBSCRIPTION
}

// Subscription enums
enum subscriptionPeriod {
  ONETIME
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
}

// Account enums
enum AccountType {
  CASH
  BANK
  CREDIT_CARD
  DEBIT_CARD
  LOAN
}

// Comman enums
enum currency {
  INR
  USD
}
