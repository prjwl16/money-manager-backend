// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Use auto increment for id
model User {
  id                  Int                   @id @default(autoincrement())
  firstName           String?
  lastName            String?
  phone               String?               @unique
  email               String?               @unique
  role                UserRole              @default(USER)
  createdAt           DateTime              @default(now()) @db.Timestamp()
  updatedAt           DateTime              @updatedAt @db.Timestamp()
  googleId            String?               @unique
  avatar              String?
  swUserId            Int?                  @unique
  swAccessToken       String?
  doneSetup           Boolean               @default(false)
  // Relations
  // One to many
  accounts            Account[]
  paidBy              Transaction[]         @relation("PaidBy")
  createdBy           Transaction[]         @relation("CreatedBy")
  groups              Group[]               @relation("createdBy")
  Category            Category[]
  // Many to many
  userInGroups        userInGroups[]
  usersInTransactions usersInTransactions[]
}

model Transaction {
  id                    Int                   @id @default(autoincrement())
  type                  TransactionAction     @default(EXPENSE)
  amount                Float
  currency              currency              @default(INR)
  name                  String?
  description           String?
  date                  DateTime?
  place                 String?
  createdAt             DateTime              @default(now()) @db.Timestamp()
  updatedAt             DateTime              @updatedAt @db.Timestamp()
  // Subscription
  isSubscription        Boolean               @default(false)
  active                Boolean               @default(true)
  plan                  subscriptionPeriod    @default(ONETIME)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  // Splitwise
  swExpenseId           Int?                  @unique
  swGroupId             Int?                  @unique
  // Relations
  accountId             Int? // Many to one
  account               Account?              @relation(fields: [accountId], references: [id])
  categoryId            Int // Many to one
  category              Category?             @relation(fields: [categoryId], references: [id])
  groupId               Int? // Many to one
  groups                Group?                @relation(fields: [groupId], references: [id])
  usersInTransactions   usersInTransactions[] // Many to many
  paidById              Int
  createdById           Int
  updatedByIds          Int[]
  paidBy                User?                 @relation("PaidBy", fields: [paidById], references: [id])
  createdBy             User?                 @relation("CreatedBy", fields: [createdById], references: [id])
}

model Account {
  id          Int           @id @default(autoincrement())
  name        String
  type        AccountType   @default(CASH)
  balance     Float         @default(0)
  isDefault   Boolean       @default(false)
  createdAt   DateTime      @default(now()) @db.Timestamp()
  updatedAt   DateTime      @updatedAt @db.Timestamp()
  // Relations
  userId      Int? // Many to one
  user        User?         @relation(fields: [userId], references: [id])
  transaction Transaction[] // Many to many
}

model Category {
  id           Int           @id @default(autoincrement())
  swId         Int?          @unique
  name         String
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now()) @db.Timestamp()
  updatedAt    DateTime      @updatedAt @db.Timestamp()
  // Relations
  userId       Int? // Many to one
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[] // Many to many
}

model Group {
  id            Int            @id @default(autoincrement())
  name          String?
  description   String?
  avatar        String?
  isDefault     Boolean        @default(false)
  createdAt     DateTime       @default(now()) @db.Timestamp()
  updatedAt     DateTime       @updatedAt @db.Timestamp()
  // Relations
  transactions  Transaction[] // Many to many
  userInGroups  userInGroups[] // Many to many
  // User who created the group
  createdBy     Int
  createdByUser User?          @relation("createdBy", fields: [createdBy], references: [id])
}

// Many to many tables
model userInGroups {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  groups    Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()

  @@id([userId, groupId])
}

model usersInTransactions {
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  createdAt     DateTime    @default(now()) @db.Timestamp()
  updatedAt     DateTime    @updatedAt @db.Timestamp()
  // Splitwise
  splitShare    Float       @default(0)

  @@id([userId, transactionId])
}

// Enums

enum UserRole {
  USER
  ADMIN
}

enum TransactionAction {
  INCOME
  EXPENSE
  SUBSCRIPTION
  SELF_TRANSFER
}

enum subscriptionPeriod {
  ONETIME
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
}

enum AccountType {
  CASH
  BANK
  CREDIT_CARD
  DEBIT_CARD
  LOAN
}

enum currency {
  INR
  USD
}
